REPL Instructions

Code can be entered at the bottom and executed by pressing shift+enter.

Try it now by typing (+ 1 1) in the bottom section and pressing shift+enter.

Working in another Clojure file and sending forms to the REPL is the most efficient way to work. Use the following key bindings to send code to the REPL. See the settings for more keybindings.

ctrl-alt-, then b
Execute block. Finds the block of Clojure code your cursor is in and executes that.

ctrl-alt-, s
Executes the selection. Sends the selected text to the REPL.

You can disable this help text in the settings.
Atom Ink does not appear to be installed. Install it to get a better REPL experience.
Starting remote REPL connection on localhost:7002
Refreshing code...
:reloading (markdown.common cuerdas.regexp cuerdas.core re-frame.db re-frame.loggers re-frame.registrar re-frame.interceptor re-frame.cofx re-frame.utils re-frame.trace re-frame.subs re-frame.std-interceptors re-frame.events re-frame.router re-frame.fx re-frame.core love-pop.layout love-pop.routes.home love-pop.dev-middleware love-pop.env love-pop.config love-pop.middleware markdown.links markdown.lists markdown.tables markdown.transformers ajax.protocols ajax.util love-pop.handler ajax.url ajax.interceptors ajax.formats ajax.simple ajax.ring ajax.json ajax.transit ajax.easy struct.core love-pop.validation love-pop.core cljs.stacktrace love-pop.figwheel user ajax.core love-pop.db love-pop.utils)
Refresh complete
(ns love-pop.events
  (:require [love-pop.db :as db]
            [love-pop.utils :as utils]
            [re-frame.core :refer [dispatch reg-event-db]]))
love-pop.events=>
nil
(let [order (utils/gen-order)]
    (println "the order is:" order)
    (-> db
      (assoc-in [:orders :sim-started] true)
      (assoc-in [:orders :list] order)))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: db in this context, compiling:(/Users/czabajhome/Projects/Clojure/LovePop/love_pop/src/cljs/love_pop/events.cljs:23:7) 
(-> {}
      (assoc-in [:orders :sim-started] true)
      (assoc-in [:orders :list] order))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: order in this context, compiling:(/Users/czabajhome/Projects/Clojure/LovePop/love_pop/src/cljs/love_pop/events.cljs:24:7) 
(let [order (utils/gen-order)]
    (println "the order is:" order)
    (-> {}
      (assoc-in [:orders :sim-started] true)
      (assoc-in [:orders :list] order)))
gen order called
generating rows
generated rows ({:card_id 100, :quantity 75, :priority 6} {:card_id 100, :quantity 10, :priority 9} {:card_id 220, :quantity 25, :priority 8} {:card_id 200, :quantity 50, :priority 0})
the order is: {:order {:id 2bdc5042-8a3e-4f43-bb4b-6c47ff25da06, :rows [{:card_id 100, :quantity 75, :priority 6} {:card_id 100, :quantity 10, :priority 9} {:card_id 220, :quantity 25, :priority 8} {:card_id 200, :quantity 50, :priority 0}]}}
love-pop.events=>
{:orders {:sim-started true, :list {:order {:id "2bdc5042-8a3e-4f43-bb4b-6c47ff25da06", :rows [{:card_id 100, :quantity 75, :priority 6} {:card_id 100, :quantity 10, :priority 9} {:card_id 220, :quantity 25, :priority 8} {:card_id 200, :quantity 50, :priority 0}]}}}}
(defn gen-order []
  (println "gen order called")
  (let [order {:order {}}
        rows  (gen-rows)]
    (println "generated rows" rows)
    (let [new-order (-> order
                      (assoc-in [:order :id] (gen-uuid))
                      (assoc-in [:order :rows] (vec rows)))]
      (println "new order" new-order)
      new-order)))
love-pop.utils=>
#'love-pop.utils/gen-order
(gen-order)
gen order called
generating rows
generated rows ({:card_id 210, :quantity 50, :priority 9} {:card_id 220, :quantity 10, :priority 5} {:card_id 120, :quantity 200, :priority 3})
new order {:order {:id 6dfd41d8-a92c-4fda-803b-399b4817a871, :rows [{:card_id 210, :quantity 50, :priority 9} {:card_id 220, :quantity 10, :priority 5} {:card_id 120, :quantity 200, :priority 3}]}}
love-pop.utils=>
{:order {:id "6dfd41d8-a92c-4fda-803b-399b4817a871", :rows [{:card_id 210, :quantity 50, :priority 9} {:card_id 220, :quantity 10, :priority 5} {:card_id 120, :quantity 200, :priority 3}]}}
(defn gen-order []
  (println "gen order called")
  (let [order {:order {}}
        rows  (gen-rows)]
    (println "generated rows" rows)
    (let [new-order (-> {}
                      (assoc-in [:order :id] (gen-uuid))
                      (assoc-in [:order :rows] (vec rows)))]
      (println "new order" new-order)
      new-order)))
love-pop.utils=>
#'love-pop.utils/gen-order
(gen-order)
gen order called
generating rows
generated rows ({:card_id 120, :quantity 200, :priority 3} {:card_id 220, :quantity 50, :priority 2})
new order {:order {:id 8b804378-1b3a-446d-8b17-bea4fed709e1, :rows [{:card_id 120, :quantity 200, :priority 3} {:card_id 220, :quantity 50, :priority 2}]}}
love-pop.utils=>
{:order {:id "8b804378-1b3a-446d-8b17-bea4fed709e1", :rows [{:card_id 120, :quantity 200, :priority 3} {:card_id 220, :quantity 50, :priority 2}]}}
(def list [{:A 2},{:b 1}])
WARNING: list already refers to: #'clojure.core/list in namespace: love-pop.utils, being replaced by: #'love-pop.utils/list
love-pop.utils=>
#'love-pop.utils/list
list
love-pop.utils=>
[{:A 2} {:b 1}]
(def list {:things [{:A 2},{:b 2}]})
love-pop.utils=>
#'love-pop.utils/list
list
love-pop.utils=>
{:things [{:A 2} {:b 2}]}
(def rows [{:card_id 220, :quantity 25, :priority 9} {:card_id 200, :quantity 10, :priority 4} {:card_id 120, :quantity 25, :priority 1}])
love-pop.utils=>
#'love-pop.utils/rows
rows
love-pop.utils=>
[{:card_id 220, :quantity 25, :priority 9} {:card_id 200, :quantity 10, :priority 4} {:card_id 120, :quantity 25, :priority 1}]
(sort-by :priority < rows)
love-pop.utils=>
({:card_id 120, :quantity 25, :priority 1} {:card_id 200, :quantity 10, :priority 4} {:card_id 220, :quantity 25, :priority 9})
(defn gen-time-to-complete []
  ;; rand-int includes 0, so, min time to complte is going to 2, max 10
  (+ 2 (rand-int 8)))
love-pop.utils=>
#'love-pop.utils/gen-time-to-complete
(defn gen-num-workstations []
  ;; same here, minimum workstations is 1, max 10
  (+ 1 (rand-int 9)))
love-pop.utils=>
#'love-pop.utils/gen-num-workstations
(def WORKSTATIONS {:order-started          {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :select-paper           {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :lazer-cut              {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :assemble-sculpture     {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :assemble-card          {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :pack-order :mail-order {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}})
RuntimeException Map literal must contain an even number of forms  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(defn gen-time-to-complete []
  ;; rand-int includes 0, so, min time to complte is going to 2, max 10
  (+ 2 (rand-int 8)))
love-pop.utils=>
#'love-pop.utils/gen-time-to-complete
(defn gen-num-workstations []
  ;; same here, minimum workstations is 1, max 10
  (+ 1 (rand-int 9)))
love-pop.utils=>
#'love-pop.utils/gen-num-workstations
(def WORKSTATIONS {:order-started          {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :select-paper           {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :lazer-cut              {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :assemble-sculpture     {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :assemble-card          {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :pack-order :mail-order {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}})
RuntimeException Map literal must contain an even number of forms  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(gen-time-to-complete)
love-pop.utils=>
3
(gen-time-to-complete)
love-pop.utils=>
6
(gen-time-to-complete)
love-pop.utils=>
4
(gen-time-to-complete)
love-pop.utils=>
2
(gen-time-to-complete)
love-pop.utils=>
8
(gen-num-workstations)
love-pop.utils=>
1
(gen-num-workstations)
love-pop.utils=>
1
(gen-num-workstations)
love-pop.utils=>
3
(defn gen-num-workstations []
  ;; same here, minimum workstations is 1, max 5
  (+ 1 (rand-int 4)))
love-pop.utils=>
#'love-pop.utils/gen-num-workstations
(gen-num-workstations)
love-pop.utils=>
4
(gen-num-workstations)
love-pop.utils=>
1
(gen-num-workstations)
love-pop.utils=>
1
(gen-num-workstations)
love-pop.utils=>
4
(gen-num-workstations)
love-pop.utils=>
1
(gen-num-workstations)
love-pop.utils=>
3
(gen-num-workstations)
love-pop.utils=>
1
(gen-num-workstations)
love-pop.utils=>
2
(gen-num-workstations)
love-pop.utils=>
1
(gen-num-workstations)
love-pop.utils=>
4
(def WORKSTATIONS {:order-started          {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :select-paper           {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :lazer-cut              {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :assemble-sculpture     {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :assemble-card          {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :pack-order :mail-order {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}})
RuntimeException Map literal must contain an even number of forms  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(def WORKSTATIONS {:order-started          {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :select-paper           {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :lazer-cut              {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :assemble-sculpture     {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :assemble-card          {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :pack-order             {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}
                   :mail-order             {:count (gen-num-workstations)
                                            :complete-time (gen-time-to-complete)}})
love-pop.utils=>
#'love-pop.utils/WORKSTATIONS
WORKSTATIONS
love-pop.utils=>
{:order-started {:count 2, :complete-time 3}, :select-paper {:count 3, :complete-time 9}, :lazer-cut {:count 3, :complete-time 7}, :assemble-sculpture {:count 4, :complete-time 2}, :assemble-card {:count 2, :complete-time 2}, :pack-order {:count 1, :complete-time 2}, :mail-order {:count 1, :complete-time 4}}
(def kw :my-thing)
love-pop.utils=>
#'love-pop.utils/kw
kw
love-pop.utils=>
:my-thing
(name kw)
love-pop.utils=>
"my-thing"
(def list [{:q 10},{:q 20},{:q 30}])
WARNING: list already refers to: #'clojure.core/list in namespace: love-pop.utils, being replaced by: #'love-pop.utils/list
love-pop.utils=>
#'love-pop.utils/list
list
love-pop.utils=>
[{:q 10} {:q 20} {:q 30}]
(map + list)
ClassCastException Cannot cast clojure.lang.PersistentArrayMap to java.lang.Number  java.lang.Class.cast (Class.java:3369)
(map (fn [i] (:q i)) list)


love-pop.utils=>
(10 20 30)
(map (+ (fn [i] (:q i))) list)



ClassCastException Cannot cast love_pop.utils$eval54826$fn__54827 to java.lang.Number  java.lang.Class.cast (Class.java:3369)
(map (fn [i] (+ (:q i))) list)



love-pop.utils=>
(10 20 30)
(+ (map (fn [i] (:q i)) list)



RuntimeException EOF while reading, starting at line 1  clojure.lang.Util.runtimeException (Util.java:221)
(apply + (map (fn [i] (:q i)) list)



RuntimeException EOF while reading, starting at line 1  clojure.lang.Util.runtimeException (Util.java:221)
(apply + (map (fn [i] (:q i)) list))



love-pop.utils=>
60
(defn gen-time-to-complete []
  ;; rand-int includes 0, so, min time to complte is going to 2, max 10
  (+ 2 (rand-int 8)))
love-pop.utils=>
#'love-pop.utils/gen-time-to-complete
(defn gen-num-workstations []
  ;; same here, minimum workstations is 1, max 5
  (+ 1 (rand-int 4)))
love-pop.utils=>
#'love-pop.utils/gen-num-workstations
(defn gen-workstation []
  {:count (gen-num-workstations)
   :complete-time (gen-time-to-complete)})
love-pop.utils=>
#'love-pop.utils/gen-workstation
(defn set-workstations []
   {:select-paper       gen-workstation
    :lazer-cut          gen-workstation
    :assemble-sculpture gen-workstation
    :assemble-card      gen-workstation
    :pack-order         gen-workstation
    :mail-order         gen-workstation})
love-pop.utils=>
#'love-pop.utils/set-workstations
(set-workstations)
love-pop.utils=>
{:select-paper #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"], :lazer-cut #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"], :assemble-sculpture #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"], :assemble-card #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"], :pack-order #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"], :mail-order #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"]}
(def work-map (set-workstations))
love-pop.utils=>
#'love-pop.utils/work-map
work-map
love-pop.utils=>
{:select-paper #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"], :lazer-cut #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"], :assemble-sculpture #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"], :assemble-card #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"], :pack-order #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"], :mail-order #object[love_pop.utils$gen_workstation 0x74348c87 "love_pop.utils$gen_workstation@74348c87"]}
(defn set-workstations []
   {:select-paper       (gen-workstation)
    :lazer-cut          (gen-workstation)
    :assemble-sculpture (gen-workstation)
    :assemble-card      (gen-workstation)
    :pack-order         (gen-workstation)
    :mail-order         (gen-workstation)})
love-pop.utils=>
#'love-pop.utils/set-workstations
(set-workstations)

love-pop.utils=>
{:select-paper {:count 2, :complete-time 5}, :lazer-cut {:count 2, :complete-time 5}, :assemble-sculpture {:count 1, :complete-time 9}, :assemble-card {:count 2, :complete-time 4}, :pack-order {:count 4, :complete-time 3}, :mail-order {:count 2, :complete-time 9}}
--------------------
